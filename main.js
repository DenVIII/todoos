(()=>{"use strict";class t{constructor(t){this.title=t,this._project=[]}addNewTask(t){this._project.push(t)}deleteTask(t){const e=this._project.findIndex((e=>e.id===t));this._project.splice(e,1)}getProject(){return Array.from(this._project)}getTitle(){return this.title}}const e=new class{constructor(t,e,s,o="-"){this.title=t,this.dueDate=e,this.taskId=`${Math.floor(Math.random()*Date.now()).toString().substring(0,5)}-${Math.floor(Math.random()*Date.now()).toString().substring(0,5)}`,this.description=o}getTitle(){return this.title}getDueDate(){return this.dueDate}getTaskId(){return this.taskId}getDescription(){return this.description}setTitle(t){this.title=t}setDueDate(t){this.dueDate=t}setDescription(t){this.description=t}}("First task (second try)","01.04.24"),s=new t("New Project"),o=new class{constructor(){this._projectsList=[]}getProjectsList(){return this._projectsList}addNewProject(t){this._projectsList.push(t)}};o.addNewProject(s),console.log(e.getTitle()),console.log(e),console.log(s.getProject()),s.addNewTask(e),console.log(s.getProject());const r=new t("Today");o.addNewProject(r),r.addNewTask({abc:11}),console.log(r.getProject()),console.log(r.getTitle()),console.log(o),s.deleteTask("12f"),console.log(s.getProject())})();